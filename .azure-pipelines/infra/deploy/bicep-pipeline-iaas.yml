trigger: none

pool:
  vmImage: "ubuntu-latest"

# environment determined by selection at runtime
parameters:
  - name: environment
    displayName: Variable Group
    type: string
    default: IaaSWebAppVarsDev
    values:
      - IaaSWebAppVarsDev
      - IaaSWebAppVarsQA

stages:
  - stage:
    variables:
      - group: ${{ parameters.environment }}
    displayName: "Deploy infrastructure using ${{ parameters.environment }}"
    jobs:
      - job:
        steps:
          - task: AzureCLI@2
            displayName: "Create Resource Group"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: "az group create --name $(resourceGroupName) --location $(location)"

          - task: AzureCLI@2
            displayName: "Deploy Bicep Template"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az deployment group create --resource-group $(resourceGroupName) --template-file infra/iaas/bicep/main.bicep --parameters adminUsername=$(adminUsername) vmSize=$(vmSize) vmName=$(vmName) location=$(location) adminPassword=$(adminPassword) --mode Incremental

          # Add NSG rule to allow inboud on :80 (rename to use your NSG name/port(s))
          - task: AzureCLI@2
            displayName: "NSG: Allow inbound traffic"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az network nsg rule create --name "AllowAnyPort80Inbound" --nsg-name "default-NSG" --priority 200 --resource-group $(resourceGroupName)

          - task: AzureCLI@2
            displayName: "Install .NET Windows Hosting Bundle"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az vm run-command invoke --command-id RunPowerShellScript --name $(vmName) -g $(resourceGroupName) --scripts @infra/scripts/install-win-hosting-bundle.ps1
