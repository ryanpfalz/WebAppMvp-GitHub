trigger:
  branches:
    include:
      - main

pool:
  vmImage: "windows-latest"

variables:
  vmName: "YourVMName"
  vmUserName: "YourVMUsername"
  vmPassword: $(VM_PASSWORD) # Securely store the password in Azure Pipelines variable group

stages:
  - stage: Build
    displayName: Build web app and publish artifacts
    jobs:
      - job: BuildDotnetApp
        displayName: Build Dotnet App
        steps:
          - task: UseDotNet@2
            inputs:
              version: "6.x"
              includePreviewVersions: true

          - task: NuGetCommand@2
            inputs:
              restoreSolution: "$(applicationName)/*.sln"

          # restore project dependencies
          - task: DotNetCoreCLI@2
            displayName: "Restore project dependencies"
            inputs:
              command: "restore"
              projects: "**/$(applicationName)/$(applicationName).csproj"

          # build web app
          - task: DotNetCoreCLI@2
            displayName: "dotnet build"
            inputs:
              command: "build"
              arguments: "--configuration $(BuildConfiguration) -p:OutputPath=$(Build.BinariesDirectory)/$(applicationName)"
              projects: "**/$(applicationName)/$(applicationName).csproj"

          # run unit tests
          # - task: DotNetCoreCLI@2
          #   displayName: "Run Unit Tests"
          #   inputs:
          #     command: "test"
          #     arguments: '--configuration $(buildConfiguration) --collect "XPlat Code Coverage"'
          #     publishTestResults: true
          #     projects: "**/UnitTests/*.csproj"

          # publish code coverage results
          # - task: PublishCodeCoverageResults@1
          #   displayName: "Publish Code Coverage Report"
          #   inputs:
          #     codeCoverageTool: Cobertura
          #     summaryFileLocation: "$(Agent.TempDirectory)/**/coverage.cobertura.xml"

          # copy IaC files to artifact staging directory
          # - task: CopyFiles@2
          #   displayName: "Copy IaC Files"
          #   inputs:
          #     SourceFolder: Devops/Infrastructure
          #     TargetFolder: "$(Build.ArtifactStagingDirectory)/Infrastructure"

          # publish web app
          - task: DotNetCoreCLI@2
            displayName: "Publish web project"
            inputs:
              command: publish
              publishWebProjects: False
              projects: $(applicationName)/$(applicationName)/$(applicationName).csproj
              arguments: "--configuration $(BuildConfiguration) -p:PublishDir=$(Build.BinariesDirectory)/$(applicationName)"
              zipAfterPublish: False

          # copy web app to artifact staging directory
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(Build.BinariesDirectory)/$(applicationName)"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(applicationName).zip"
              includeRootFolder: False

          # # publish artifact
          # - task: PublishPipelineArtifact@1
          #   inputs:
          #     targetPath: "$(Build.ArtifactStagingDirectory)"
          #     artifactName: "AzDO-Demo-Artifact"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Build Artifact"
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)/$(applicationName).zip"
              artifactName: "dotnet-app"
              publishLocation: "Container"

  - stage: ReleaseDev
    variables:
      - group: WebAppVarsDev
    displayName: "Release Stage - Dev"
    dependsOn: Build
    condition: succeeded('Build')
    jobs:
      - deployment: ReleaseDevJob
        displayName: "Release Job - Dev"
        environment:
          name: "Dev"
          resourceType: "VirtualMachine"
          tags: "dev"
          vmImage: "windows-latest"
          vmResourceGroup: "YourVMResourceGroup"
          virtualMachine: $(vmName)
          parallel: 1
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: "Download Artifact"
                  inputs:
                    artifact: "drop"
                    path: "$(Pipeline.Workspace)"

                - task: PowerShell@2
                  displayName: "Deploy to Dev VM"
                  inputs:
                    targetType: "inline"
                    script: |
                      # Your deployment script or commands to copy and deploy the application to the Dev VM
                      # For example:
                      # Copy-Item -Path "$(Pipeline.Workspace)/*" -Destination "\\$(vmName)\c$\YourAppFolder" -Recurse -Force
                      # Enter-PSSession -ComputerName "$(vmName)" -Credential (Get-Credential -UserName "$(vmUserName)" -Password "$(vmPassword)")
                      # Set-Location -Path "C:\YourAppFolder"
                      # .\YourApp.exe

  - stage: ReleaseQA
    variables:
      - group: WebAppVarsQA
    displayName: "Release Stage - QA"
    dependsOn: ReleaseDev
    condition: succeeded('ReleaseDev')
    jobs:
      - deployment: ReleaseQAJob
        displayName: "Release Job - QA"
        environment:
          name: "QA"
          resourceType: "VirtualMachine"
          tags: "qa"
          vmImage: "windows-latest"
          vmResourceGroup: "YourVMResourceGroup"
          virtualMachine: $(vmName)
          parallel: 1
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: "Download Artifact"
                  inputs:
                    artifact: "drop"
                    path: "$(Pipeline.Workspace)"

                - task: PowerShell@2
                  displayName: "Deploy to QA VM"
                  inputs:
                    targetType: "inline"
                    script: |
                      # Your deployment script or commands to copy and deploy the application to the QA VM
                      # For example:
                      # Copy-Item -Path "$(Pipeline.Workspace)/*" -Destination "\\$(vmName)\c$\YourAppFolder" -Recurse -Force
                      # Enter-PSSession -ComputerName "$(vmName)" -Credential (Get-Credential -UserName "$(vmUserName)" -Password "$(vmPassword)")
                      # Set-Location -Path "C:\YourAppFolder"
                      # .\YourApp.exe
