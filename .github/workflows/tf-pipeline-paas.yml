name: Azure Terraform Deployment

on:
  # for development ###
  # push:
  #   branches:
  #     - dev
  # for development ###

  # need to be aligned to .tfvars file names
  workflow_dispatch:
    inputs:
      selectedEnvironment:
        type: choice
        required: true
        default: Dev
        description: Environment
        options:
          - Dev
          - QA

#These environment variables are used by the terraform azure provider to authenticate
env:
  TF_DIR: "./infra/paas/terraform"
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform-run:
    name: "Terraform Init, Plan, Apply"
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # if action runs from branch trigger, workflow dispatch input will be blank
      # set based on the trigger branch (defaults to dev for any non-main branch) & set to lowercase
      # reference: https://stackoverflow.com/a/72562291/8333117
      - name: Update Environment Variables
        id: variableUpdate
        run: |-
          echo "lowerCaseEnvValue=$(
          if [[ "${{ github.event.inputs.selectedEnvironment }}" != "" ]]; then
            echo ${{ github.event.inputs.selectedEnvironment }}
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo prod
          else
            echo dev
          fi
          )" >> $GITHUB_ENV

      # https://github.com/marketplace/actions/azure-login
      # need to set service principal as contributor on the subscription
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Setup Terraform Backend in Azure
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create --name ${{ vars.TF_RESOURCE_GROUP }} --location ${{ vars.TF_REGION }}
            az storage account create --resource-group ${{ vars.TF_RESOURCE_GROUP }} --name ${{ vars.TF_STORAGE_ACCOUNT }} --sku Standard_LRS --encryption-services blob
            tfBackendStorageKey=$(az storage account keys list --account-name ${{ vars.TF_STORAGE_ACCOUNT }} --resource-group ${{ vars.TF_RESOURCE_GROUP }} --query "[0].value" --output tsv)
            az storage container create --name ${{ vars.TF_CONTAINER_NAME }} --public-access off --account-name ${{ vars.TF_STORAGE_ACCOUNT }} --account-key $tfBackendStorageKey

      # https://nedinthecloud.com/2021/12/08/github-actions-with-terraform/
      - name: Terraform Init
        id: tf-init
        run: |
          cd $TF_DIR
          terraform init -reconfigure -backend-config="key=${{ env.lowerCaseEnvValue }}/terraform.tfstate" -backend-config="storage_account_name=${{ vars.TF_STORAGE_ACCOUNT }}" -backend-config="container_name=${{ vars.TF_CONTAINER_NAME }}" -backend-config="resource_group_name=${{ vars.TF_RESOURCE_GROUP }}"

      - name: Terraform Format
        run: |
          cd $TF_DIR
          terraform fmt -check

      - name: Terraform Plan
        id: tf-plan
        run: |
          cd $TF_DIR
          terraform plan -var-file ${{ env.lowerCaseEnvValue }}.tfvars -detailed-exitcode -no-color -out tfplan || export exitcode=$?

      # at this point, can add additional steps like saving out tfplan as an artifact, running apply in another stage after approval, etc.
      # example: https://github.com/Azure-Samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml
      - name: Terraform Apply
        run: |
          cd $TF_DIR
          terraform apply -auto-approve tfplan
